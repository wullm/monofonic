#########################################################################################
# Example config file for MUSIC2 - monofonIC single resolution simulation ICs
#                                                            version 1 from 2020/08/23
#########################################################################################

#########################################################################################
[setup]

GridRes         = 128      # number of grid cells per linear dimension for calculations 
                           #   = particles for sc initial load
BoxLength       = 300      # length of the box in Mpc/h
zstart          = 24.0     # starting redshift

LPTorder        = 3        # order of the LPT to be used (1,2 or 3)

DoBaryons       = no       # also do baryon ICs?
DoBaryonVrel    = no       # if doing baryons, incl. also relative velocity to linear order?

DoFixing        = no       # do mode fixing Ã  la Angulo&Pontzen (https://arxiv.org/abs/1603.05253)
DoInversion     = no       # invert phases (for paired simulations)

ParticleLoad    = sc       # particle load, can be 'sc' (1x), 'bcc' (2x) or 'fcc' (4x) 
                           # (increases number of particles by given factor!), 
                           # or 'glass' or 'masked'

## if `ParticleLoad = masked' then you can specify here how masking should take place
# ParticleMaskType = 3     # bit mask for particle mask (0=center,1=center+edges,2=center+faces,3=center+edges+faces)

## if `ParticleLoad = glass' then specify here where to load the glass distribution from
# GlassFileName   = glass128.hdf5
# GlassTiles      = 1

DoDensityVelocityCorr = yes # 1st order velocity correction: account for the initial difference between theta_cdm and delta_cdm on large scales

WithNeutrinos = yes        # master switch for enabling the following neutrino corrections

# Setting WithNeutrinos = yes enables each of the following (off by default). Uncomment for specific configurations.
# ExcludeNeutrinos = no      # 0th order correction: set cdm particle masses proportional to Omega_cdm and not Omega_cdm + Omega_nu_massive
# CDMBaryonMatterOnly = no   # 1st order correction: exclude neutrinos from the delta_matter and theta_matter transfer functions, i.e. dm = fb * db + fc * dc.
# DoNeutrinoPhi2Corr = no    # 2nd order correction: set the coefficient of the second order potential equal to the asymptotic value
# DoNeutrinoPhi3Corr = no    # 3rd order correction: set the coefficient of the third order potential equal to the asymptotic value

#########################################################################################
# Settings for neutrino particle initial conditions
# Note that these settings are distinct from the neutrino settings above, which
# only account for the presence of neutrinos in the dark matter & baryon ICs.
#
# Only the first neutrino species is generated, but degeneracy is taken into account.
# For example, for a standard 0.3 eV model, define in the cosmology section below:
#
# m_nu1 = 0.10
# m_nu2 = 0.0 # not used
# m_nu3 = 0.0 # not used
# deg_nu1 = 3.0
# deg_nu2 = 0.0 # not used
# deg_nu3 = 0.0 # not used

DoNeutrinoParticles = yes  # generate neutrino particles with FastDF?
NeutrinoCubeRootNum = 32   # N, where the number of neutrino particles is N^3
NeutrinoGridRes = 32       # force mesh resolution for integrating neutrinos (should be <= GridRes, typically much smaller)
NeutrinoStepSize = 0.05    # step size (delta log a) for integrating neutrinos
NeutrinoInterpOrder = 1    # interpolation order (1 = NGP, 2 = CIC): NGP is much faster but less accurate

#########################################################################################
[cosmology]
## transfer = ... specifies the Einstein-Boltzmann plugin module

ParameterSet    = Planck2018EE+BAO+SN  # specify a pre-defined parameter set, or set to 'none' and set manually below

## cosmological parameters, to set, choose ParameterSet = none,
## default values (those not specified) are set to the values
## from 'Planck2018EE+BAO+SN', we currently assume flatness
# Omega_m         = 0.3158
# Omega_b         = 0.0494
# Omega_L         = 0.6842 # not used (inferred from Omega_tot = 1)
# H0              = 67.321
# n_s             = 0.9661
# sigma_8         = 0.8102
# A_s             = 2.148752e-09  # can use A_s instead of sigma_8 when using CLASS or zwindstroom
# Tcmb            = 2.7255
# k_p             = 0.05
# N_ur            = 2.046
# m_nu1           = 0.06
# m_nu2           = 0.0
# m_nu3           = 0.0
# deg_nu1         = 1.0
# deg_nu2         = 1.0
# deg_nu3         = 1.0
# w_0             = -1.0
# w_a             = 0.0

ZeroRadiation   = false  # For Back-scaling only: set to true if your simulation code 
                         # cannot deal with Omega_r!=0 in its background FLRW model

## Use below for anisotropic large scale tidal field ICs up to 2LPT
## see Stuecker+2020 (https://arxiv.org/abs/2003.06427)
# LSS_aniso_lx    = +0.1
# LSS_aniso_ly    = +0.1
# LSS_aniso_lz    = -0.2

### MODULES: ###

##> Eisenstein & Hu (1997) fitting formulae 
## this is fast, but not too accurate. Also baryons trace CDM here. 
## see https://arxiv.org/abs/astro-ph/9709112

# transfer        = eisenstein   

##> CAMB transfer function file module
## This should be transfer function output with CAMB (https://camb.info)
## at the *target* redshift

# transfer        = file_CAMB    # CAMB file to be specified as 'transfer_file = ...'
# transfer_file   = wmap5_transfer_out_z0.dat

##> CLASS module, which links to the actual CLASS C-code.
## note that CLASS needs to be cloned as a git submodule and enabled in CMake file

# transfer        = CLASS
# ztarget         = 2.5             # target redshift for CLASS module, output at ztarget will be back-scaled to zstart

##> For neutrino models, we provide the zwindstroom module, which links both to
## the CLASS and zwindstroom C-codes. The former is used to provide the initial
## transfer functions and the latter for scale-dependent growth factors from a
## calculation of a Newtonian 3-fluid model with baryons + cdm + neutrinos.
## Unlike the CLASS plugin, this also outputs (nearly) exact N-body gauge
## transfer functions.
## It will also account for neutrinos in the Hubble rate, which enters
## into the conversion factor between displacements and velocities.
## Note that both CLASS and zwindstroom need to be cloned as git submodules
## and enabled in the CMake file.

transfer        = zwindstroom
ztarget         = 0.0          # target redshift, output at ztarget will be back-scaled to zstart


#########################################################################################
[random]
## generator = ... specifies the random field generator plugin module

##> NGenIC compatible random number generator module compatible with V. Springel's original code
## (https://www.h-its.org/2014/11/05/ngenic-code/) as well as the 2LPT code by Pueblas&Scoccmiarro
## (https://cosmo.nyu.edu/roman/2LPT/)
generator      = NGENIC
seed           = 12345

##> The PANPHASIA generator uses a plugin based on original code by A. Jenkins
## Warning: Before using this module, please make sure you read and agree to the distinct license
## requirements by registering on the website http://icc.dur.ac.uk/Panphasia.php

# generator      = PANPHASIA
# descriptor     = [Panph1,L10,(800,224,576),S9,CH1564365824,MXXL]
# PanphasiaMinRootResolution = 512 # requires the white noise reallisation to be made at least at that resolution (default is 512)

##> The MUSIC1 multi-scale random number generator is provided for convenience
## warning: MUSIC1 generator is not MPI parallel (yet) (memory is needed for full field on each task)
# generator      = MUSIC1  
# seed[7]        = 12345
# seed[8]        = 23456
# seed[9]        = 34567

# Add a possible constraint field here:
# ConstraintFieldFile = initial_conditions.hdf5
# ConstraintFieldName = ic_white_noise


#########################################################################################
[execution]
# Specify the number of threads / task
NumThreads      = 8


#########################################################################################
[output]
## format = .... specifies the output plugin module

##> RAMSES / GRAFIC2 compatible format
# format	        = grafic2
# filename        = ics_ramses
# grafic_use_SPT  = no # if no then uses PPT, otherwise linear SPT

##> Gadget-2/3 'fortran unformatted binary'-style format
# format          = gadget2
# filename        = ics_gadget.dat
# UseLongids      = false

##> Gadget-2/3 HDF5 format
# format          = gadget_hdf5
# filename        = ics_gadget.hdf5

##> Arepo HDF5 format (virtually identical to gadget_hdf5)
# format          = AREPO
# filename        = ics_arepo.hdf5

##> HACC compatible generic-io format
# format          = genericio
# filename        = ics_hacc

##> SWIFT compatible HDF5 format. Format broadly similar to gadget_hdf5 but in a single
##> file even when using MPI. No h-factors for position and masses and no sqrt(a)-factor for the velocities.
##> IDs are stored using 64-bits unless UseLongids is set to false.
# format          = SWIFT
# filename        = ics_swift.hdf5
# UseLongids      = true

##> Generic HDF5 output format for testing or PT-based calculations
# format          = generic
# filename        = debug.hdf5
# generic_out_eulerian = yes  # if yes then uses PPT for output
